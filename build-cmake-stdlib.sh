SWIFT_VERSION=5.5.3

# Configurable
SWIFT_NATIVE_PATH=/usr/bin
SWIFT_LLVM_DIR=/usr/lib/llvm-12
STAGING_DIR=/home/coleman/bullseye-armv7
SRC_ROOT=/home/coleman/Developer/swift-armv7

# Arch defines
SWIFT_TARGET_ARCH=armv7
SWIFT_TARGET_NAME=armv7-unknown-linux-gnueabihf

# Build paths
SWIFT_SRCDIR=$SRC_ROOT/build/swift-swift-${SWIFT_VERSION}-RELEASE
LIBDISPATCH_SRCDIR=$SRC_ROOT/build/swift-corelibs-libdispatch-swift-${SWIFT_VERSION}-RELEASE
SWIFT_BUILDDIR=$SRC_ROOT/build/swift-armv7
SWIFTPM_DESTINATION_FILE=$SRC_ROOT/build/$SWIFT_TARGET_NAME-toolchain.json
SWIFT_CMAKE_TOOLCHAIN_FILE=$SRC_ROOT/build/linux-$SWIFT_TARGET_ARCH-toolchain.cmake


echo "Create Swift build folder"
rm -rf $SWIFT_BUILDDIR
mkdir -p $SWIFT_BUILDDIR

echo "Generate SwiftPM cross compilation toolchain file"
rm -f ${SWIFTPM_DESTINATION_FILE}
touch ${SWIFTPM_DESTINATION_FILE}
	printf '{' >> ${SWIFTPM_DESTINATION_FILE}
	printf '   "version":1,' >> ${SWIFTPM_DESTINATION_FILE}
	printf '   "sdk":"${STAGING_DIR}",' >> ${SWIFTPM_DESTINATION_FILE}
	printf '   "toolchain-bin-dir":"${SWIFT_NATIVE_PATH}",' >> ${SWIFTPM_DESTINATION_FILE}
	printf '   "target":"$(SWIFT_TARGET_NAME)",' >> ${SWIFTPM_DESTINATION_FILE}
	echo '   "dynamic-library-extension":"so",' >> ${SWIFTPM_DESTINATION_FILE}
	echo '   "extra-cc-flags":[' >> ${SWIFTPM_DESTINATION_FILE}
	echo '      "-fPIC"' >> ${SWIFTPM_DESTINATION_FILE}
	echo '   ],' >> ${SWIFTPM_DESTINATION_FILE}
	echo '   "extra-swiftc-flags":[' >> ${SWIFTPM_DESTINATION_FILE}
	echo '      "-target", "$(SWIFT_TARGET_NAME)",' >> ${SWIFTPM_DESTINATION_FILE}
	echo '      "-use-ld=lld",' >> ${SWIFTPM_DESTINATION_FILE}
	echo '      "-tools-directory", "/usr/bin",' >> ${SWIFTPM_DESTINATION_FILE}
	echo '      "-Xlinker", "-rpath", "-Xlinker", "/usr/lib/swift/linux",' >> ${SWIFTPM_DESTINATION_FILE}
	echo '      "-Xlinker", "-L$(STAGING_DIR)",' >> ${SWIFTPM_DESTINATION_FILE}
	echo '      "-Xlinker", "-L$(STAGING_DIR)/lib",' >> ${SWIFTPM_DESTINATION_FILE}
	echo '      "-Xlinker", "-L$(STAGING_DIR)/usr/lib",' >> ${SWIFTPM_DESTINATION_FILE}
	echo '      "-Xlinker", "-L$(STAGING_DIR)/usr/lib/swift/linux",' >> ${SWIFTPM_DESTINATION_FILE}
	echo '      "-Xlinker", "-L$(STAGING_DIR)/usr/lib/swift/linux/$(SWIFT_TARGET_ARCH)",' >> ${SWIFTPM_DESTINATION_FILE}
	echo '      "-Xlinker", "-L$(HOST_DIR)/lib/gcc/$(GNU_TARGET_NAME)/$(call qstrip,$(BR2_GCC_VERSION))",' >> ${SWIFTPM_DESTINATION_FILE}
	echo '      "-Xlinker", "--build-id=sha1",' >> ${SWIFTPM_DESTINATION_FILE}
	echo '      "-I$(STAGING_DIR)/usr/include",' >> ${SWIFTPM_DESTINATION_FILE}
	echo '      "-I$(STAGING_DIR)/usr/lib/swift",' >> ${SWIFTPM_DESTINATION_FILE}
	echo '      "-resource-dir", "$(STAGING_DIR)/usr/lib/swift",' >> ${SWIFTPM_DESTINATION_FILE}
	echo '      "-Xclang-linker", "-B$(STAGING_DIR)/usr/lib",' >> ${SWIFTPM_DESTINATION_FILE}
	echo '      "-Xclang-linker", "-B$(HOST_DIR)/lib/gcc/$(GNU_TARGET_NAME)/$(call qstrip,$(BR2_GCC_VERSION))",' >> ${SWIFTPM_DESTINATION_FILE}
	echo '      "-sdk", "$(STAGING_DIR)"' >> ${SWIFTPM_DESTINATION_FILE}
	echo '   ],' >> ${SWIFTPM_DESTINATION_FILE}
	echo '   "extra-cpp-flags":[' >> ${SWIFTPM_DESTINATION_FILE}
	echo '      "-lstdc++"' >> ${SWIFTPM_DESTINATION_FILE}
	echo '   ]' >> ${SWIFTPM_DESTINATION_FILE}
	echo '}' >> ${SWIFTPM_DESTINATION_FILE}


echo "Generate cmake toolchain"
rm -f ${SWIFT_CMAKE_TOOLCHAIN_FILE}
touch ${SWIFT_CMAKE_TOOLCHAIN_FILE}
	echo 'set(CMAKE_SYSTEM_NAME Linux)' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
	echo 'set(CMAKE_C_COMPILER $(SWIFT_NATIVE_PATH)/clang)' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(CMAKE_CXX_COMPILER $(SWIFT_NATIVE_PATH)/clang++)' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(CMAKE_C_FLAGS "-w -fuse-ld=lld -target $(GNU_TARGET_NAME) --sysroot $(STAGING_DIR) -I$(STAGING_DIR)/usr/include -B$(STAGING_DIR)/usr/lib -B$(HOST_DIR)/lib/gcc/$(GNU_TARGET_NAME)/$(call qstrip,$(BR2_GCC_VERSION)) -L$(HOST_DIR)/lib/gcc/$(GNU_TARGET_NAME)/$(call qstrip,$(BR2_GCC_VERSION))")' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
	echo 'set(CMAKE_C_LINK_FLAGS "-target $(GNU_TARGET_NAME) --sysroot $(STAGING_DIR)")' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(CMAKE_CXX_FLAGS "-w -fuse-ld=lld -target $(GNU_TARGET_NAME) --sysroot $(STAGING_DIR) -I$(STAGING_DIR)/usr/include -I$(HOST_DIR)/$(GNU_TARGET_NAME)/include/c++/$(call qstrip,$(BR2_GCC_VERSION))/ -I$(HOST_DIR)/$(GNU_TARGET_NAME)/include/c++/$(call qstrip,$(BR2_GCC_VERSION))/$(GNU_TARGET_NAME) -B$(STAGING_DIR)/usr/lib -B$(HOST_DIR)/lib/gcc/$(GNU_TARGET_NAME)/$(call qstrip,$(BR2_GCC_VERSION)) -L$(HOST_DIR)/lib/gcc/$(GNU_TARGET_NAME)/$(call qstrip,$(BR2_GCC_VERSION))")' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(CMAKE_CXX_LINK_FLAGS "-target $(GNU_TARGET_NAME) --sysroot $(STAGING_DIR)")' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
	echo 'set(SWIFT_USE_LINKER lld)' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(LLVM_USE_LINKER lld)' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(LLVM_DIR $(SWIFT_LLVM_DIR)/lib/cmake/llvm)' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(LLVM_BUILD_LIBRARY_DIR $(SWIFT_LLVM_DIR))' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(LLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN ON)' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
	echo 'set(SWIFT_INCLUDE_TOOLS OFF)' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(SWIFT_BUILD_RUNTIME_WITH_HOST_COMPILER ON)' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
	echo 'set(SWIFT_PREBUILT_CLANG ON)' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(SWIFT_NATIVE_CLANG_TOOLS_PATH $(SWIFT_NATIVE_PATH))' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
	echo 'set(SWIFT_NATIVE_LLVM_TOOLS_PATH $(SWIFT_NATIVE_PATH))' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(SWIFT_NATIVE_SWIFT_TOOLS_PATH $(SWIFT_NATIVE_PATH))' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(SWIFT_BUILD_AST_ANALYZER OFF)' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(SWIFT_BUILD_DYNAMIC_SDK_OVERLAY ON)' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(SWIFT_BUILD_DYNAMIC_STDLIB ON)' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(SWIFT_BUILD_REMOTE_MIRROR OFF)' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(SWIFT_BUILD_SOURCEKIT OFF)' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(SWIFT_BUILD_STDLIB_EXTRA_TOOLCHAIN_CONTENT OFF)' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(SWIFT_BUILD_SYNTAXPARSERLIB OFF)' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(SWIFT_BUILD_REMOTE_MIRROR OFF)' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(SWIFT_ENABLE_SOURCEKIT_TESTS OFF)' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(SWIFT_INCLUDE_DOCS OFF)' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(SWIFT_INCLUDE_TOOLS OFF)' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(SWIFT_INCLUDE_TESTS OFF)' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(SWIFT_LIBRARY_EVOLUTION 0)' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(SWIFT_RUNTIME_OS_VERSIONING OFF)' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(SWIFT_HOST_VARIANT_ARCH $(SWIFT_TARGET_ARCH))' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(SWIFT_SDKS LINUX)' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(SWIFT_SDK_LINUX_ARCH_$(SWIFT_TARGET_ARCH)_PATH ${STAGING_DIR} )' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(SWIFT_SDK_LINUX_ARCH_$(SWIFT_TARGET_ARCH)_LIBC_INCLUDE_DIRECTORY ${STAGING_DIR}/usr/include )' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(SWIFT_SDK_LINUX_ARCH_$(SWIFT_TARGET_ARCH)_LIBC_ARCHITECTURE_INCLUDE_DIRECTORY ${STAGING_DIR}/usr/include)' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(SWIFT_LINUX_$(SWIFT_TARGET_ARCH)_ICU_I18N ${STAGING_DIR}/usr/lib/libicui18n.so)' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(SWIFT_LINUX_$(SWIFT_TARGET_ARCH)_ICU_UC ${STAGING_DIR}/usr/lib/libicuuc.so)' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(ICU_I18N_LIBRARIES ${STAGING_DIR}/usr/lib/libicui18n.so)' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
    echo 'set(ICU_UC_LIBRARIES ${STAGING_DIR}/usr/lib/libicuuc.so)' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
	echo 'set(LibRT_LIBRARIES ${STAGING_DIR}/usr/lib/librt.a)' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
	echo 'set(ZLIB_LIBRARY $(STAGING_DIR)/usr/lib/libz.so)' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
	echo 'set(SWIFT_PATH_TO_LIBDISPATCH_SOURCE $(LIBDISPATCH_SRCDIR))' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}
	echo 'set(SWIFT_ENABLE_EXPERIMENTAL_CONCURRENCY ON)' >> ${SWIFT_CMAKE_TOOLCHAIN_FILE}

echo "Configure Swift"
rm -rf $SWIFT_BUILDDIR/CMakeCache.txt
LIBS="-latomic" cmake -S $SWIFT_SRCDIR -B $SWIFT_BUILDDIR -G Ninja \
		-DCMAKE_INSTALL_PREFIX="/usr" \
		-DCMAKE_COLOR_MAKEFILE=OFF \
		-DBUILD_DOC=OFF \
		-DBUILD_DOCS=OFF \
		-DBUILD_EXAMPLE=OFF \
		-DBUILD_EXAMPLES=OFF \
		-DBUILD_TEST=OFF \
		-DBUILD_TESTS=OFF \
		-DBUILD_TESTING=OFF \
		-DBUILD_SHARED_LIBS=ON \
		-DCMAKE_CROSSCOMPILING=ON \
		-DCMAKE_TOOLCHAIN_FILE=$SWIFT_CMAKE_TOOLCHAIN_FILE \
		-DCMAKE_BUILD_TYPE=Release \
		-DSWIFT_USE_LINKER=lld \
        -DLLVM_USE_LINKER=lld \
        -DLLVM_DIR=${SWIFT_LLVM_DIR}/lib/cmake/llvm \
        -DLLVM_TEMPORARILY_ALLOW_OLD_TOOLCHAIN=ON \
        -DSWIFT_BUILD_RUNTIME_WITH_HOST_COMPILER=ON \
        -DSWIFT_NATIVE_CLANG_TOOLS_PATH=$SWIFT_NATIVE_PATH \
        -DSWIFT_NATIVE_SWIFT_TOOLS_PATH=$SWIFT_NATIVE_PATH \
        -DSWIFT_BUILD_AST_ANALYZER=OFF \
        -DSWIFT_BUILD_DYNAMIC_SDK_OVERLAY=ON \
        -DSWIFT_BUILD_DYNAMIC_STDLIB=ON \
        -DSWIFT_BUILD_REMOTE_MIRROR=OFF \
        -DSWIFT_BUILD_SOURCEKIT=OFF \
        -DSWIFT_BUILD_STDLIB_EXTRA_TOOLCHAIN_CONTENT=OFF \
        -DSWIFT_BUILD_SYNTAXPARSERLIB=OFF \
        -DSWIFT_BUILD_REMOTE_MIRROR=OFF \
        -DSWIFT_ENABLE_SOURCEKIT_TESTS=OFF \
        -DSWIFT_INCLUDE_DOCS=OFF \
        -DSWIFT_INCLUDE_TOOLS=OFF \
        -DSWIFT_INCLUDE_TESTS=OFF \
        -DSWIFT_LIBRARY_EVOLUTION=0 \
        -DSWIFT_RUNTIME_OS_VERSIONING=OFF \
        -DSWIFT_HOST_VARIANT_ARCH=$SWIFT_TARGET_ARCH \
        -DSWIFT_SDKS=LINUX \
        -DSWIFT_SDK_LINUX_ARCH_${SWIFT_TARGET_ARCH}_PATH=${STAGING_DIR}  \
        -DSWIFT_SDK_LINUX_ARCH_${SWIFT_TARGET_ARCH}_LIBC_INCLUDE_DIRECTORY=${STAGING_DIR}/usr/include  \
        -DSWIFT_SDK_LINUX_ARCH_${SWIFT_TARGET_ARCH}_LIBC_ARCHITECTURE_INCLUDE_DIRECTORY=${STAGING_DIR}/usr/include \
        -DSWIFT_LINUX_${SWIFT_TARGET_ARCH}_ICU_I18N=${STAGING_DIR}/usr/lib/libicui18n.so \
        -DSWIFT_LINUX_${SWIFT_TARGET_ARCH}_ICU_UC=${STAGING_DIR}/usr/lib/libicuuc.so \
        -DICU_I18N_LIBRARIES=${STAGING_DIR}/usr/lib/libicui18n.so \
        -DICU_UC_LIBRARIES=${STAGING_DIR}/usr/lib/libicuuc.so \

echo "Build Swift StdLib"
(cd $SWIFT_BUILDDIR && ninja)

echo "Copy Swift StdLib"
# Copy runtime libraries and swift interfaces
cp -rf ${SWIFT_BUILDDIR}/lib/swift ${STAGING_DIR}/usr/local/lib/


